{"mappings":"YA2DA,IAA4BA,KAiBR,QAhBX,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,QAAQC,IAAI,qBAA8BC,OAATN,IAEjCO,YAAW,WAKPL,EAAQ,gB,GAIT,I,KAKJM,MAAK,SAAAC,G,OAAQL,QAAQC,IAAII,E,IACzBC,OAAM,SAAAC,G,OAASP,QAAQO,MAAMA,E","sources":["src/js/03-promises.js"],"sourcesContent":["// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n// const promise = new Promise((resolve, reject) => {\n//   const canFulFill = Math.random() > 0.5;\n//   setTimeout(() => {\n//     if (canFulFill) {\n//       resolve('Succes');\n//     }\n//     reject('error');\n//   }, 2000);\n// });\n\n// promise.then(onFulfilled, onRejected);\n\n// function onFulfilled(result) {\n//   console.log(`${result}`);\n// }\n// function onRejected(error) {\n//   console.log(`${error}`);\n// }\n// Change value of isSuccess variable to call resolve or reject\n// Change value of isSuccess variable to call resolve or reject\n// const isSuccess = false;\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     if (isSuccess) {\n//       resolve('Success! Value passed to resolve function');\n//     } else {\n//       reject('Error! Error passed to reject function');\n//     }\n//   }, 2000);\n// });\n\n// // Will run first\n// console.log('Before promise.then()');\n\n// // Registering promise callbacks\n// promise.then(\n//   // onResolve will run third or not at all\n//   value => {\n//     console.log('onResolve call inside promise.then()');\n//     console.log(value); // \"Success! Value passed to resolve function\"\n//   },\n//   // onReject will run third or not at all\n//   error => {\n//     console.log('onReject call inside promise.then()');\n//     console.log(error); // \"Error! Error passed to reject function\"\n//   }\n// );\n\n// // Will run second\n// console.log('After promise.then()');\nconst fetchUserFromServer = username => {\n  return new Promise((resolve, reject) => {\n    console.log(`Fetching data for ${username}`);\n\n    setTimeout(() => {\n      // Change value of isSuccess variable to simulate request status\n      const isSuccess = true;\n\n      if (isSuccess) {\n        resolve('success value');\n      } else {\n        reject('error');\n      }\n    }, 2000);\n  });\n};\n\nfetchUserFromServer('Mango')\n  .then(user => console.log(user))\n  .catch(error => console.error(error));\n"],"names":["username","Promise","resolve","reject","console","log","concat","setTimeout","then","user","catch","error"],"version":3,"file":"03-promises.b0bda94a.js.map"}